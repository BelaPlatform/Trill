//*****************************************************************************
//*****************************************************************************
//  FILENAME: CSD.h
//   Version: 2.10, Updated on 2012/9/21 at 11:56:9
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION: CSD User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef CSD_INCLUDE
#define CSD_INCLUDE

#include <m8c.h>

//--------------------------------------------------
// Constants for CSD
//--------------------------------------------------

#define CSD_TotalSensorCount                      0x1e
#define CSD_ButtonCount                           0x0
#define CSD_SliderCount                           0x1 + 0x0 

#define CSD_BUTTONS_EXIST                         0x0
#define CSD_SLIDERS_EXIST                         0x1 | 0x0
#define CSD_AUTOCAL_ENABLE                        0x1

//--------------------------------------------------
// Constants for Scan Speed values
//--------------------------------------------------
#define CSD_ULTRA_FAST_SPEED                      0x00
#define CSD_FAST_SPEED                            0x01
#define CSD_NORMAL_SPEED                          0x02
#define CSD_SLOW_SPEED                            0x03
#define CSD_SCANNING_SPEED                        0x0

//--------------------------------------------------
// Constants for Prescaler values
//--------------------------------------------------
#define CSD_PRESCALER                             0x1
#define CSD_PRESCALER_1                           0x00
#define CSD_PRESCALER_2                           0x01
#define CSD_PRESCALER_4                           0x02
#define CSD_PRESCALER_8                           0x03
#define CSD_PRESCALER_16                          0x04
#define CSD_PRESCALER_32                          0x05
#define CSD_PRESCALER_64                          0x06
#define CSD_PRESCALER_128                         0x07
#define CSD_PRESCALER_256                         0x08

//--------------------------------------------------
// Constants for Thresholds values
//--------------------------------------------------
#define CSD_FINGER_THRESHOLD                      0x3c
#define CSD_NOISE_THRESHOLD                       0x28
#define CSD_BASELINE_UPDATE_THRESHOLD             0x64
#define CSD_HYSTERESIS                            0xa

//--------------------------------------------------
// Constants for Resolution values
//--------------------------------------------------
#define CSD_MIN_RESOLUTION                        9
#define CSD_9_BIT_RESOLUTION                      9
#define CSD_10_BIT_RESOLUTION                     10
#define CSD_11_BIT_RESOLUTION                     11
#define CSD_12_BIT_RESOLUTION                     12
#define CSD_13_BIT_RESOLUTION                     13
#define CSD_14_BIT_RESOLUTION                     14
#define CSD_15_BIT_RESOLUTION                     15
#define CSD_16_BIT_RESOLUTION                     16
#define CSD_MAX_RESOLUTION                        16
#define CSD_RESOLUTION                           0xc

//--------------------------------------------------
// Variables for CSD.
//--------------------------------------------------

extern WORD CSD_waSnsResult[];
extern WORD CSD_waSnsBaseline[];
extern WORD CSD_waSnsDiff[];
extern BYTE CSD_baSnsOnMask[];
extern BYTE CSD_baBtnFThreshold[];

#if(CSD_AUTOCAL_ENABLE)
extern BYTE CSD_baDAC[];
#endif


// Low Level scan API
#pragma fastcall16 CSD_Start
#pragma fastcall16 CSD_Stop
#pragma fastcall16 CSD_Resume
#pragma fastcall16 CSD_ScanSensor
#pragma fastcall16 CSD_ScanAllSensors
#pragma fastcall16 CSD_ClearSensors
#pragma fastcall16 CSD_wReadSensor
#pragma fastcall16 CSD_wGetPortPin
#pragma fastcall16 CSD_EnableSensor
#pragma fastcall16 CSD_DisableSensor
#pragma fastcall16 CSD_SetScanMode
#pragma fastcall16 CSD_SetIdacValue
#pragma fastcall16 CSD_SetPrescaler
#if(CSD_AUTOCAL_ENABLE)
#pragma fastcall16 CSD_CalibrateSensors
#pragma fastcall16 CSD_SetSliderIdac
#endif

// High Level API
#pragma fastcall16 CSD_UpdateSensorBaseline
#pragma fastcall16 CSD_bIsSensorActive
#pragma fastcall16 CSD_bIsAnySensorActive
#pragma fastcall16 CSD_SetDefaultFingerThresholds
#pragma fastcall16 CSD_InitializeSensorBaseline
#pragma fastcall16 CSD_InitializeBaselines
#pragma fastcall16 CSD_UpdateAllBaselines
#pragma fastcall16 CSD_wGetCentroidPos
#pragma fastcall16 CSD_wGetRadialPos
#pragma fastcall16 CSD_wGetRadialInc

//-------------------------------------------------
// C prototypes of the CSD API.
//-------------------------------------------------

extern void CSD_Start(void);
extern void CSD_Stop(void);
extern void CSD_Resume(void);
extern void CSD_ScanSensor(BYTE bSensor);
extern void CSD_ScanAllSensors(void);
extern void CSD_ClearSensors(void);
extern WORD CSD_wReadSensor(BYTE bSensor);
extern WORD CSD_wGetPortPin(BYTE bSensor);
extern void CSD_EnableSensor(BYTE bMask, BYTE bPort);
extern void CSD_DisableSensor(BYTE bMask, BYTE bPort);
extern void CSD_SetScanMode(BYTE bSpeed, BYTE bResolution);
extern void CSD_SetIdacValue(BYTE bIdacValue);
extern void CSD_SetPrescaler(BYTE bPrescaler);
#if(CSD_AUTOCAL_ENABLE)
extern void CSD_CalibrateSensors(WORD wValue);
extern void CSD_SetSliderIdac(void);
#endif

//-------------------------------------------------
// High level functions
//-------------------------------------------------

extern void CSD_UpdateSensorBaseline(BYTE bSensorNum);
extern BYTE CSD_bIsSensorActive(BYTE bSensorNum);
extern BYTE CSD_bIsAnySensorActive(void);
extern void CSD_SetDefaultFingerThresholds(void);
extern void CSD_InitializeSensorBaseline(BYTE bSensorNum);
extern void CSD_InitializeBaselines(void);
extern void CSD_UpdateAllBaselines(void);
#if CSD_SLIDERS_EXIST
  extern WORD CSD_wGetCentroidPos(BYTE bSnsGroup);
  extern WORD CSD_wGetRadialPos(BYTE bSnsGroup);
  extern WORD CSD_wGetRadialInc(BYTE bSnsGroup);
#endif

//-------------------------------------------------
// Register Addresses for CSD
//-------------------------------------------------
#pragma ioport  CSD_CapSense_CR0_REG:   0x0a0              // CS block control Register 0
BYTE            CSD_CapSense_CR0_REG;
#pragma ioport  CSD_CapSense_CR1_REG:   0x0a1              // CS block control Register 1
BYTE            CSD_CapSense_CR1_REG;
#pragma ioport  CSD_CapSense_CR2_REG:   0x0a2              // CS block control Register 2
BYTE            CSD_CapSense_CR2_REG;
#pragma ioport  CSD_CapSense_CR3_REG:   0x0a3              // CS block control Register 3
BYTE            CSD_CapSense_CR3_REG;
#pragma ioport  CSD_CapSense_STAT_REG:  0x0a6              
BYTE            CSD_CapSense_STAT_REG;
#pragma ioport  CSD_CapSense_CNTH_REG:  0x0a5              
BYTE            CSD_CapSense_CNTH_REG;
#pragma ioport  CSD_CapSense_CNTL_REG:  0x0a4              
BYTE            CSD_CapSense_CNTL_REG;
#pragma ioport  CSD_CMP_CR0_REG:    0x07a                  
BYTE            CSD_CMP_CR0_REG;
#pragma ioport  CSD_CMP_CR1_REG:    0x07b                  
BYTE            CSD_CMP_CR1_REG;
#pragma ioport  CSD_CMP_MUX_REG:    0x079                  
BYTE            CSD_CMP_MUX_REG;
#pragma ioport  CSD_CONFIG_REG: 0x0b3                      // Timer config
BYTE            CSD_CONFIG_REG;
#pragma ioport  CSD_DATA_1_REG: 0x0b4                      // Timer Data Hi
BYTE            CSD_DATA_1_REG;
#pragma ioport  CSD_DATA_0_REG: 0x0b5                      // Timer Data Lo
BYTE            CSD_DATA_0_REG;
#pragma ioport  CSD_PRS_CR_REG:   0x0a9                  // PRS_CR Reg
BYTE            CSD_PRS_CR_REG;

#endif
